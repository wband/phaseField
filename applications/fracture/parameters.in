# =================================================================================
# Set the number of dimensions (1, 2, or 3 for a 1D, 2D, or 3D calculation)
# =================================================================================
set Number of dimensions = 2

# =================================================================================
# Set the length of the domain in all three dimensions
# =================================================================================
# Each axes spans from zero to the specified length
set Domain size X = 40.0
set Domain size Y = 40.0
set Domain size Z = 40.0

# =================================================================================
# Set the element parameters
# =================================================================================
# The number of elements in each direction is 2^(refineFactor) * subdivisions
# For optimal performance, use refineFactor primarily to determine the element size
set Subdivisions X = 3
set Subdivisions Y = 3
set Subdivisions Z = 3

set Refine factor = 5

# Set the polynomial degree of the element (allowed values: 1, 2, or 3)
set Element degree = 1

# =================================================================================
# Set the adaptive mesh refinement parameters
# =================================================================================
# Set the flag determining if adaptive meshing is activated
set Mesh adaptivity = true

# Set the maximum and minimum level of refinement
# When adaptive meshing is enabled, the refine factor set in the block above is
# only used to generate the first pass of the mesh as the initial conditions are
# applied. It should be set somewhere between the max and min levels below.
set Max refinement level = 5
set Min refinement level = 2

# Set the number of time steps between remeshing operations
set Steps between remeshing operations = 50

# Set the criteria for adapting the mesh
subsection Refinement criterion: n
    # Select whether the mesh is refined based on the variable value (VALUE),
    # its gradient (GRADIENT), or both (VALUE_AND_GRADIENT)
    set Criterion type = VALUE
    # Set the lower and upper bounds for the value-based refinement window
    set Value lower bound = 0.01
    set Value upper bound = 2.0
end

# =================================================================================
# Set the time step parameters
# =================================================================================
# The size of the time step
set Time step = 5.0e-3

# The simulation ends when either the number of time steps is reached or the
# simulation time is reached.
set Number of time steps = 12000

# =================================================================================
# Set the linear solver parameters
# =================================================================================

subsection Linear solver parameters: u
    # Whether the tolerance value is compared to the residual (ABSOLUTE_RESIDUAL)
    # or the change in the residual (RELATIVE_RESIDUAL_CHANGE)
    set Tolerance type = ABSOLUTE_RESIDUAL

    # The tolerance for convergence (L2 norm)
    set Tolerance value = 5e-4

    # The maximum number of linear solver iterations per solve
    set Maximum linear solver iterations = 2000
end

# =================================================================================
# Set the output parameters
# =================================================================================
# Type of spacing between outputs ("EQUAL_SPACING", "LOG_SPACING", "N_PER_DECADE",
# or "LIST")
set Output condition =  EQUAL_SPACING

# Number of times the program outputs the fields (total number for "EQUAL_SPACING"
# and "LOG_SPACING", number per decade for "N_PER_DECADE", ignored for "LIST")
set Number of outputs = 60

# The number of time steps between updates being printed to the screen
set Skip print steps = 100 #1000

# =================================================================================
# Set the checkpoint/restart parameters
# =================================================================================
# Whether to start this simulation from the checkpoint of a previous simulation
set Load from a checkpoint = false

# Type of spacing between checkpoints ("EQUAL_SPACING", "LOG_SPACING", "N_PER_DECADE",
# or "LIST")
set Checkpoint condition = EQUAL_SPACING

# Number of times the creates checkpoints (total number for "EQUAL_SPACING"
# and "LOG_SPACING", number per decade for "N_PER_DECADE", ignored for "LIST")
set Number of checkpoints = 0

# =================================================================================
# Set the boundary conditions
# =================================================================================
# Set the boundary condition for each variable, where each variable is given by
# its name, as defined in equations.h. The four boundary condition
# types are NATURAL, DIRICHLET, NON_UNIFORM_DIRICHLET and PERIODIC. If all
# of the boundaries have the same boundary condition, only one boundary condition
# type needs to be given. If multiple boundary condition types are needed, give a
# comma-separated list of the types. The order is the miniumum of x, maximum of x,
# minimum of y, maximum of y, minimum of z, maximum of z (i.e left, right, bottom,
# top in 2D and left, right, bottom, top, front, back in 3D). The value of a
# Dirichlet BC is specfied in the following way -- DIRCHILET: val -- where 'val' is
# the desired value. If the boundary condition is NON_UNIFORM_DIRICHLET, the
# boundary condition should be specified in the appropriate function in 'ICs_and_BCs.h'.
# Example 1: All periodic BCs for variable 'c'
# set Boundary condition for variable c = PERIODIC
# Example 2: Zero-derivative BCs on the left and right, Dirichlet BCs with value
# 1.5 on the top and bottom for variable 'n' in 2D
# set Boundary condition for variable n = NATURAL, NATURAL, DIRICHLET: 1.5, DIRICHLET: 1.5

set Boundary condition for variable n = NATURAL
set Boundary condition for variable dndt = NATURAL
set Boundary condition for variable u, x component = NATURAL
set Boundary condition for variable u, y component = NATURAL, NATURAL, DIRICHLET: 0.0, NON_UNIFORM_DIRICHLET
set Boundary condition for variable u, z component = NATURAL

#set Boundary condition for variable u, x component = DIRICHLET: 0.0, DIRICHLET: 1.0, NATURAL, NATURAL
#set Boundary condition for variable u, y component = NATURAL
#set Boundary condition for variable u, z component = NATURAL

# =================================================================================
# Set the model constants
# =================================================================================
# Type options currently are double, int, bool, and tensor

# stepped strain
# if true, displacement of top boundary increases by u_step at intervals of step_t
# if false, displacement at every time is equal to u_step*time/step_t
set Model constant stepped_strain = false, bool

# displacement per step increase
set Model constant u_step = 0.01, double

# time between strain increases
set Model constant step_t = 2.0, double

# The Allen-Cahn mobilities
set Model constant MnV = 4.0, double

# Interface width parameter
set Model constant ell2 = 2.0, double

# Interface energy parameter
set Model constant gc_ell = 1.0, double

# n_dependent_stiffness
set Model constant n_dependent_stiffness = true, bool

set Model constant k_small = 1e-5, double

set Model constant CIJ_Mg = (4000.0,0.3), isotropic elastic constants
